package com.example.javapoc2.service;

import com.example.javapoc2.dto.repository.ProductGroupResult;
import com.example.javapoc2.dto.response.*;
import com.example.javapoc2.entity.Product;
import com.example.javapoc2.repository.ProductRepository;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;

@Service
@RequiredArgsConstructor // Lombok annotation for constructor injection
public class ProductService {

    private static final Logger log = LoggerFactory.getLogger(ProductService.class);
    private final ProductRepository productRepository;

    // Define character pools
    private static final String LATIN_UPPERCASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    private static final String GREEK_UPPERCASE = "ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ";
    // Hebrew alphabet including letters with Dagesh/Shin/Sin dots where applicable
    private static final String HEBREW_LETTERS = "אבבּגדהווזחטיכּכךלמםנןסעפפּפףצץקרששׂת";

    public Page<Product> getAllProducts(Pageable pageable) {
        return productRepository.findAll(pageable);
    }

    @Transactional // Ensure atomicity for the bulk insert
    public void populateProducts() {
        log.info("Starting product population...");
        List<Product> productsToSave = new ArrayList<>(1000);
        Random random = ThreadLocalRandom.current(); // Efficient random number generation

        for (int i = 0; i < 1000; i++) {
            String categoryA = String.valueOf(LATIN_UPPERCASE.charAt(random.nextInt(LATIN_UPPERCASE.length())));
            String categoryB = String.valueOf(GREEK_UPPERCASE.charAt(random.nextInt(GREEK_UPPERCASE.length())));
            String categoryC = String.valueOf(HEBREW_LETTERS.charAt(random.nextInt(HEBREW_LETTERS.length())));
            int priceCents = random.nextInt(100, 10001); // Generates between 100 (1.00) and 10000 (100.00) inclusive

            Product product = new Product();
            product.setCategoryA(categoryA);
            product.setCategoryB(categoryB);
            product.setCategoryC(categoryC);
            product.setPriceCents(priceCents);
            // ID is auto-generated by JPA

            productsToSave.add(product);
        }

        productRepository.saveAll(productsToSave); // Efficient batch saving
        log.info("Successfully populated 1000 products.");
    }

    public ProductStatsResponse getProductStats() {
        List<ProductGroupResult> results = productRepository.findProductStatsByGroupingSets();

        List<CategoryAStat> byCategoryA = new ArrayList<>();
        List<CategoryBStat> byCategoryB = new ArrayList<>();
        List<CategoryCStat> byCategoryC = new ArrayList<>();
        TotalStat totalStat = null;

        for (ProductGroupResult result : results) {
            // Handle potential nulls from SUM/COUNT on empty groups
            long count = result.getCount() != null ? result.getCount() : 0L;
            double value = result.getValue() != null ? result.getValue() : 0.0;
            Integer groupingId = result.getGroupingId();

            // Determine the grouping set based on the groupingId
            // GROUPING(categorya, categoryb, categoryc)
            // categorya grouped: 011 = 3
            // categoryb grouped: 101 = 5
            // categoryc grouped: 110 = 6
            // grand total grouped: 111 = 7
            if (groupingId == 3) { // Grouped by categoryA (categoryB and categoryC are aggregated)
                byCategoryA.add(new CategoryAStat(result.getCategoryA(), count, value));
            } else if (groupingId == 5) { // Grouped by categoryB (categoryA and categoryC are aggregated)
                byCategoryB.add(new CategoryBStat(result.getCategoryB(), count, value));
            } else if (groupingId == 6) { // Grouped by categoryC (categoryA and categoryB are aggregated)
                byCategoryC.add(new CategoryCStat(result.getCategoryC(), count, value));
            } else if (groupingId == 7) { // Grand total (all categories aggregated)
                totalStat = new TotalStat(count, value);
            } else {
                // Log or handle unexpected groupingId values if necessary
                // For our query, we only expect 3, 5, 6, 7
                System.err.println("Unexpected groupingId: " + groupingId);
            }
        }

        // Ensure totalStat has default values if the table was empty or had no matching rows for the total aggregation
        if (totalStat == null) {
            totalStat = new TotalStat(0L, 0.0);
        }

        return new ProductStatsResponse(byCategoryA, byCategoryB, byCategoryC, totalStat);
    }
}
